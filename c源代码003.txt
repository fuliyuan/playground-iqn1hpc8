//301白金价格.c  -- 相等重量的白金价值
#include <stdio.h>
int main(void)
{
	//你的体重
    float 体重;
    //相等重量的白金价值
    float 价值;
    
    printf("你的体重是否相等重量的白金价值？\n");
    printf("让我们来看看。\n");
    printf("请输入您的体重，以磅为单位： ");
    
    //获取用户的输入
    scanf("%f", &体重);
    //假设白金的价格是每盎司$1700
    //14.5833用于把英镑常衡盎司转换为金衡盎司
    价值 = 1700.0 * 体重 * 14.5833;
    printf("你的体重的价值是 $%.2f。\n", 价值);
    printf("你很容易做到这一点！如果铂金价格下跌，\n");
    printf("多吃点东西来维持你的价值。\n");
    
    return 0;
}
﻿//302格式化打印.c-演示printf()的一些特性
#include <stdio.h>
int main(void)
{
    int 十 = 10;
    int 二 = 2;
    
    printf("正确的做法：");
    printf("%d 减去 %d 是 %d\n", 十, 2, 十 - 二 );
    printf("做错了：");
    //遗漏2个参数
    printf("%d 减去 %d 是 %d\n", 十 );
    
    return 0;
}
﻿//303进制显示.c--以十进制、八进制、十六进制打印十进制数100
#include <stdio.h>
int main(void)
{
    int x = 100;
    
    printf("十进制d = %d; 八进制o = %o; 十六进制x = %x\n", x, x, x);
    printf("十进制d = %d; 八进制o = %#o; 十六进制x = %#x\n", x, x, x);
    
    return 0;
}
﻿//304格式化打印.c-更多printf()的特性
#include <stdio.h>
int main(void)
{
	//无符号整数为32位
    unsigned int 整数 = 3000000000;
    //有符号短整数为16位
    short 短整数 = 200;
    //有符号长整数
    long 长整数 = 65537;
    //有符号超长整数
    long long 超长整数 = 12345678908642;
    
    printf("整数 = %u 并不是 %d\n", 整数, 整数);
    printf("短整数 = %hd 与 %d\n", 短整数, 短整数);
    printf("长整数 = %ld 并不是 %hd\n", 长整数, 长整数);
    printf("超长整数 = %lld 并不是 %ld\n", 超长整数, 超长整数);
    
    return 0;
}
﻿//305字符代码.c-显示字符的代码编号
#include <stdio.h>
int main(void)
{
    char 字符;
    
    printf("请输入一个字符。\n");
    //用户输入字符
    scanf("%c", &字符);
    printf("%c 字符的整数值是 %d。\n", 字符, 字符);
    
    return 0;
}
﻿//306可移植类型.c -- 可移植整数类型名
#include <stdio.h>
// 支持可移植类型
#include <inttypes.h>
int main(void)
{
    // 有符号整型是一个32位有符号整型变量
    int32_t 有符号整型;
    
    有符号整型 = 45933945;
    printf("首先，假设int32_t是整数int：");
    printf("有符号整型 = %d\n", 有符号整型);
    printf("接下来，我们不要做任何假设。\n");
    printf("相反，使用inttypes.h中的\"宏macro\"： ");
    printf("有符号整型 = %"PRId32"\n", 有符号整型);
    
    return 0;
}
﻿//307打印浮点值.c -- 以两种方式显示float浮点类型的值
#include <stdio.h>
int main(void)
{
    float 低浮点 = 32000.0;
    double 高浮点 = 2.14e9;
    long double 长浮点 = 5.32e-5;
    
    printf("%f 可以写成 %e\n", 低浮点, 低浮点);
    //下一行要求编译器支持C99或其中的相关特性
    printf("它是十六进制的%a，2表示法的幂\n", 低浮点);
    printf("%f 可以写成 %e\n", 高浮点, 高浮点);
    printf("%Lf 可以写成 %Le\n", 长浮点, 长浮点);
    
    return 0;
}
﻿//308类型大小.c -- 打印类型大小
#include <stdio.h>
int main(void)
{
    //C99为类型大小提供%zd转换说明
    printf("类型int整数的大小为%zd个字节。\n", sizeof(int));
    printf("类型char字符的大小为%zd个字节。\n", sizeof(char));
    printf("类型long长整数的大小为%zd个字节。\n", sizeof(long));
    printf("类型long long超长整数的大小为%zd个字节。\n",
           sizeof(long long));
    printf("类型double高浮点的大小为%zd个字节。\n",
           sizeof(double));
    printf("类型long double长浮点的大小为%zd个字节。\n",
           sizeof(long double));
    return 0;
}
﻿//309参数和陷阱.c -- 参数错误的情况
#include <stdio.h>
int main(void)
{
    int n = 4;
    int m = 5;
    float f = 7.0f;
    float g = 8.0f;
    
    //参数太多
    printf("%d\n", n, m);
    //参数太少
    printf("%d %d %d\n", n);
    //值的类型不匹配
    printf("%d %d\n", f, g);
    
    return 0;
}
﻿//310转移序列.c -- 使用转移序列
#include <stdio.h>
int main(void)
{
    float 薪水;
    
    //1
    printf("\a输入你想要的月薪：");
    //2
    printf(" $_______\b\b\b\b\b\b\b");
    scanf("%f", &薪水);
    //3
    printf("\n\t  一个月是$%.2f，一年是$%.2f。", 薪水,
           薪水 * 12.0);
    //4
    printf("\r啧啧！\n");
    
    return 0;
}
﻿//整数溢出.c-超出系统允许的最大int整数值
#include <stdio.h>
int main(void)
{
	//有符号整数
    int i = 2147483647;
    //无符号整数
    unsigned int j = 4294967295;
    
    printf("%d %d %d\n", i, i+1, i+2);
    printf("%u %u %u\n", j, j+1, j+2);
    
    return 0;
}
﻿//浮点数舍入错误.c--演示舍入错误
#include <stdio.h>
int main(void)
{
    float a,b;
    
    b = 2.0e20 + 1.0;
    a = b - 2.0e20;
    printf("%f \n", a);
    
    return 0;
}
第三章：关键概念
C语言提供了大量的数值类型，目的是为程序员提供方便。那以整数类型为例，C认为一种整型不够，提供了有符号、无符号，以及大小不同的整型，以满足不同程序的需求。
计算机中的浮点数和整数在本质上不同，其存储方式和运算过程有很大区别。即使两个32位存储单元储存的位组合完全相同，但是一个解释为float类型，另一个解释为long类型，这两个相同的位组合表示的值也完全不同。例如，在PC中，假设一个位组合表示float类型的数256.0，如果将其解释为long类型，得到的值是113246208。C语言允许编写混合数据类型的表达式，但是会进行自动类型转换，以便在实际运算时统一使用一种类型。
计算机在内存中用数值编码来表示字符。美国最常用的是ASCII码，除此之外C也支持其他编码。字符常量是计算机系统使用的数值编码的符号表示，它表示为单引号括起来的字符，如'A'。

第三章：小结
C 有多种的数据类型。基本数据类型分为两大类：整数类型和浮点数类型。通过为类型分配的储存量以及是有符号还是无符号，区分不同的整数类型。最小的整数类型是char字符，因实现不同，可以是有符号的char或无符号的char字符，即unsigned char无符号字符或signed char有符号字符。但是，通常用char字符类型表示小整数时才这样显示说明。其他整数类型有short短整数、int整数、long长整数和long long超长整数类型。C规定，后面的类型不能小于前面的类型。上述都是有符号类型，但也可以使用unsigned无符号关键字创建相应的无符号类型：unsigned short无符号短整数、unsigned int无符号整数、unsigned long无符号长整数和unsigned long long无符号超长整数。或者，在类型名前加上signed有符号修饰符显式表明该类型是有符号类型。最后，_Bool布尔类型是一种无符号类型，可储存0或1，分别代表false假和true真。
浮点类型有3种：float低浮点、double高浮点和C90新增的long double长浮点。后面的类型应大于或等于前面的类型。有些实现可选择支持复数类型和虚数类型，通过关键字_Complex复数和_Imaginary虚数与浮点类型的关键字组合（如，double _Complex高浮点复数类型和float _Imaginary低浮点虚数类型）来表示这些类型。 
整数可以表示为十进制、八进制或十六进制。0前缀表示八进制数，0x或0X前缀表示十六进制数。例如，32、040、0x20分别以十进制、八进制、十六进制表示同一个值。l或L前缀表明该值是long长整数类型， ll或LL前缀表明该值是long long超长整数类型。
在C语言中，直接表示一个字符常量的方法是：把该字符用单引号括起来，如'Q'、'8'和'$'。C语言的转义序列（如，'\n'）表示某些非打印字符。另外，还可以在八进制或十六进制数前加上一个反斜杠（如，'\007'），表示ASCII美国标准码中的一个字符。
浮点数可写成固定小数点的形式（如，9393.912）或指数形式（如，7.38E10）。C99和C11提供了第3种指数表示法，即用十六进制数和2的幂来表示（如，0xa.1fp10）。
printf()格式化打印函数根据转换说明打印各种类型的值。转换说明最简单的形式由一个百分号（%）和一个转换字符组成，如%d或%f。

第三章：复习题
复习题的参考答案在附录A中。 

1.指出下面各种数据使用的合适数据类型（有些可使用多种数据类型）： 
a. 东斯克顿的人口 
b. DVD影碟的价格 
c. 本章出现次数最多的字母 
d. 本章出现次数最多的字母次数

2.在什么情况下要用long长整数类型的变量代替int整数类型的变量？ 
3.使用哪些可移植的数据类型可以获得32位有符号整数？选择的理由是什么？ 
4.指出下列常量的类型和含义（如果有的话）： 
a. '\b' 
b. 1066 
c. 99.44 
d. 0XAA 
e. 2.0e30

5.蒂凯编写了一个程序，请找出程序中的错误。
include <stdio.h>
main
(
float g; h;
float 税, 率;
g = e21;
税 = 率*g;
)

6.写出下列常量在声明中使用的数据类型和在printf()格式化打印函数中对应的转换说明：
[常量]------[类型]----[转换说明(%转换字符)]
[12]--------[]-----[]
[0X3]-------[]-----[]
['c']-------[]-----[]
[2.34E07]---[]-----[]
['\040']----[]-----[]
[7.0]-------[]-----[]
[6L]--------[]-----[]
[6.0f]------[]-----[]
[0x5.b6p12]-[]-----[]

7.写出下列常量在声明中使用的数据类型和在printf()格式化打印函数中对应的转换说明（假设int整数为16位）：
[常量]------[类型]----[转换说明(%转换字符)]
[012]-------[]-----[]
[2.9e05L]---[]-----[]
['s']-------[]-----[]
[100000]----[]-----[]
['\n']------[]-----[]
[20.0f]-----[]-----[]
[0x44]------[]-----[]
[-40]-------[]-----[]

8.假设程序的开头有下列声明：
int 整数 = 2;
long 短整数 = 53456;
char 字符 = 'A';
float 低浮点 = 2.71828;
把下面printf()语句中的转换字符补充完整：
printf("对%___的赔率是%___到1。\n", 整数, 短整数);
printf("%___分数不是%__分数。\n", 低浮点, 字符);

9.假设 字符 是char字符类型的变量。分别使用转义序列、十进制值、八进制字符常量和十六进制字符常量把回车字符赋给 字符（假设使用ASCII美国标准编码值）。
10.修正下面的程序（在C中，/表示除以）。
/ 这个程序是完美的 /
void main(int)
{
奶牛, 腿整数;
printf("你有多少牛腿？\n);
scanf("%c", 腿);
奶牛 = 腿 / 4;
printf("这意味着有%f奶牛。\n", 奶牛)
}

11.指出下列转义序列的含义：
a. \n
b. \\
c. \"
d. \t

A.3 第3章复习题答案
1.a.int类型，也可以是short类型或unsigned short类型。人口数是一个整
数。
b.float类型，价格通常不是一个整数（也可以使用double类型，但实际
上不需要那么高的精度）。
c.char类型。
 
d.int类型，也可以是unsigned类型。
2.原因之一：在系统中要表示的数超过了int可表示的范围，这时要使用
long类型。原因之二：如果要处理更大的值，那么使用一种在所有系统上都
保证至少是 32 位的类型，可提高程序的可移植性。
3.如果要正好获得32位的整数，可以使用int32_t类型。要获得可储存至
少32位整数的最小类型，可以使用int_least32_t类型。如果要为32位整数提
供最快的计算速度，可以选择int_fast32_t类型（假设你的系统已定义了上述
类型）。
4.a.char类型常量（但是储存为int类型）
b.int类型常量
c.double类型常量
d.unsigned int类型常量，十六进制格式
e.double类型常量
5.第1行：应该是#include <stdio.h>
第2行：应该是int main(void)
第3行：把(改为｛
第4行：g和h之间的;改成,
第5行：没问题
第6行：没问题
第7行：虽然这数字比较大，但在e前面应至少有一个数字，如1e21或
1.0e21都可以。 
第8行：没问题，至少没有语法问题。
第9行：把)改成}
除此之外，还缺少一些内容。首先，没有给rate变量赋值；其次未使用h
变量；而且程序不会报告计算结果。虽然这些错误不会影响程序的运行（编
译器可能给出变量未被使用的警告），但是它们确实与程序设计的初衷不符
合。另外，在该程序的末尾应该有一个return语句。
下面是一个正确的版本，仅供参考：
#include <stdio.h>
int main(void)
{
float g, h;
float 税, 率;
率 = 0.08;
g = 1.0e5;
税 = 率*g;
h = g + 税;
printf("你欠$%f加$%f税，总共$%f。\n", g, 税, h);
return 0;
}
6.
 
[常量]-------[类型]----[转换说明(%转换字符)]
[12]--------[int]--------------[%d]
[0X3]-------[unsigned int]-----[%#X]
['c']-------[char实际上是int]----[%c]
[2.34E07]---[double]-----------[%e]
['\040']----[char实际上是int]---[%c]
[7.0]-------[double]-----------[%f]
[6L]--------[long]-------------[%ld]
[6.0f]------[float]------------[%f]
[0x5.b6p12]-[float]------------[%a]
7.
[常量]------[类型]----[转换说明(%转换字符)]
[012]-------[unsigned int]-----[%#o]
[2.9e05L]---[long double]-----[%le]
['s']-------[char]-----[%c]
[100000]----[long]-----[%ld]
['\n']------[char]-----[%c]
[20.0f]-----[float]-----[%f]
[0x44]------[unsigned int]-----[%#x]
[-40]-------[int]-----[%d]
8.printf("对%d的赔率为1。\n", 你有, 镜头);printf("%f的分数不是%c分数。\n", 日志, 等级);
9.ch = '\r';
ch = 13;
ch = '\015'
ch = '\xd'
10.最前面缺少一行（第0行）：#include <stdio.h>
第1行：使用/*和*/把注释括起来，或者在注释前面使用//。
第3行：int cows, legs;
第4行：country？\n"); 
第5行：把%c改为%d，把legs改为&legs。
第7行：把%f改为%d。
另外，在程序末尾还要加上return语句。
下面是修改后的版本：
#include <stdio.h>
int main(void) 
/* 这个程序是完美的 */
{
int 奶牛, 腿;
printf("你有多少牛腿？\n");
scanf("%d", &腿);
奶牛 = 腿 / 4;
printf("这意味着有%d奶牛。\n", 奶牛);
return 0;
}
11.a.换行字符
b.反斜杠字符
c.双引号字符
d.制表字符
 

第三章：编程练习
1.通过试验（即编写带有此类问题的程序）观察系统如何处理整数上溢、浮点数上溢和浮点数下溢的情况。
2.编写一个程序，要求提示输入一个ASCII美国标准码值（如，66），然后打印输入的字符。
3.编写一个程序，发出一声警报，然后打印下面的文本：
突如其来的声音吓了一跳，莎莉震惊了，
“大南瓜，那是什么！”

4.编写一个程序，读取一个浮点数，先打印成小数点形式，再打印成指数形式。然后，如果系统支持，再打印成p记数法（即十六进制记数法）。按以下格式输出（实际显示的指数位数因系统而异）：
输入一个浮点值：64.25
浮点表示法：64.250000
指数e表示法：6.425000e+01
十六进制p表示法：0x1.01p+6

5.一年大约有3.156×107秒。编写一个程序，提示用户输入年龄，然后显示该年龄对应的秒数。
6. 1个水分子的质量约为3.0×10−23克。1夸脱水大约是950克。编写一个程序，提示用户输入水的夸脱数，并显示水分子的数量。
7. 1英寸相当于2.54厘米。编写一个程序，提示用户输入身高（/英寸），然后以厘米为单位显示身高。 
8.在美国的体积测量系统中，1品脱等于2杯，1杯等于8盎司，1盎司等于2大汤勺，1大汤勺等于3茶勺。编写一个程序，提示用户输入杯数，并以品脱、盎司、汤勺、茶勺为单位显示等价容量。思考对于该程序，为何使用浮点类型比整数类型更合适？

第三章：编程练习参考答案
  
//编程练习 3-2
#include <stdio.h>
int main(void)
{
int 美国编码;
printf("输入一个ASCII码：");
scanf("%d", &美国编码);
printf("%d是%c的ASCII码。\n", 美国编码, 美国编码);
return 0;
}
  
//编程练习 3-4
#include <stdio.h>
int main(void)
{
float 号码;
printf("输入一个浮点值：");
scanf("%f", &号码);
printf("定点表示法： %f\n", 号码);
printf("指数e表示法： %e\n", 号码);
printf("十六进制p表示法： %a\n", 号码);
return 0;
}
  
//编程练习 3-6
#include <stdio.h>
int main(void)
{
float 质量分子 = 3.0e-23;
//以克计的水分子质量
float 质量夸脱 = 950;
//以克为单位的水的质量
float 夸脱;
float 分子;
printf("输入水的数量： ");
scanf("%f", &夸脱);
分子 = 夸脱 * 质量夸脱 / 质量分子;
printf("%f夸脱的水含有%e分子。\n",夸脱, 分子);
return 0;
}
